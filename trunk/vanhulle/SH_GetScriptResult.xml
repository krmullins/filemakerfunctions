<?xml version="1.0" encoding="UTF-8"?><FMClipboard ><Version>20000102</Version><Comment>Version History==========20070106 – KVH – Original versionDescription=======Get list of all active tabs that are in the front Usage====FW_GetActiveTabs ( 0 ; "" ) </Comment><SourceWindowName></SourceWindowName><Class>XMCF</Class><ClipVersion></ClipVersion><ClipTimeStamp>3290407119</ClipTimeStamp><ClipAuthor></ClipAuthor><Clipboard>&amp;lt;CustomFunction id=&amp;quot;1&amp;quot; name=&amp;quot;SH_GetScriptResult&amp;quot; visible=&amp;quot;True&amp;quot; parameters=&amp;quot;PropertyName&amp;quot;&amp;gt;&amp;lt;Calculation&amp;gt;&amp;lt;![CDATA[// SH_GetScriptResult ( PropertyName ) /*Version History==========20060927 – KVH - Description=======Function Name : SH_GetScriptParameterparameter 1 : PropertyNameOutput: $SH_errNum : Error Number $SH_errText : Error Text */Let ( [ parameter = PropertyName ; propertylist = Get ( ScriptResult ) ; $$SH_GetScriptParameter_separator = If(IsEmpty($$SH_GetScriptParameter_separator) ; &amp;quot;|&amp;quot; ; $$SH_GetScriptParameter_separator) ; countEqualsign = PatternCount( propertyList ; &amp;quot;=&amp;quot;) ; countSeparator = PatternCount( propertyList ; $$SH_GetScriptParameter_separator) ; thePropertylist = $$SH_GetScriptParameter_separator  &amp;amp; propertylist &amp;amp; $$SH_GetScriptParameter_separator ; checkstring1 = $$SH_GetScriptParameter_separator &amp;amp; parameter &amp;amp; &amp;quot;=&amp;quot; ; checkstring2 = $$SH_GetScriptParameter_separator &amp;amp; &amp;quot; &amp;quot; &amp;amp; parameter &amp;amp; &amp;quot;=&amp;quot; ; checkstring3 = $$SH_GetScriptParameter_separator &amp;amp; parameter &amp;amp; &amp;quot; =&amp;quot; ; checkstring4 = $$SH_GetScriptParameter_separator &amp;amp; &amp;quot; &amp;quot; &amp;amp; parameter &amp;amp; &amp;quot; =&amp;quot; ; checkoccurences = PatternCount ( Substitute(thePropertylist; &amp;quot; &amp;quot; ; &amp;quot;&amp;quot;) ; checkstring1 ) + PatternCount ( Substitute(thePropertylist; &amp;quot; &amp;quot; ; &amp;quot;&amp;quot;) ; checkstring2 ) + PatternCount ( Substitute(thePropertylist; &amp;quot; &amp;quot; ; &amp;quot;&amp;quot;) ; checkstring3 ) + PatternCount ( Substitute(thePropertylist; &amp;quot; &amp;quot; ; &amp;quot;&amp;quot;) ; checkstring4 ) ; paramPos = Position ( thePropertylist ; checkstring1 ; 1 ; 1 ) +Position ( thePropertylist ; checkstring2 ; 1 ; 1 ) + Position ( thePropertylist ; checkstring3 ; 1 ; 1 ) + Position ( thePropertylist ; checkstring4 ; 1 ; 1 ) ; posCorrection = If(Position ( thePropertylist ; checkstring2 ; 1 ; 1 ) ; 1) + If(Position ( thePropertylist ; checkstring3 ; 1 ; 1 );1) + If(Position ( thePropertylist ; checkstring4 ; 1 ; 1 )  ; 2) ; startValue = parampos + Length(parameter) + posCorrection + 2 ; endValue = Position ( thepropertylist ; $$SH_GetScriptParameter_separator ; startValue ; 1 ) ; theValue = Middle ( thepropertylist ; startValue ; endValue - startValue ) ] ; Case ( // Level 1 IsEmpty(propertylist) ; Let([$SH_errNum = 10 ; $SH_errText = &amp;quot;[error] Propertylist is empty&amp;quot; ] ; &amp;quot;&amp;quot; ) ; // Level 2 IsEmpty(parameter) ; Let([$SH_errNum = 21 ; $SH_errText = &amp;quot;[error] Property name is empty&amp;quot; ] ; &amp;quot;&amp;quot; ) ; countEqualsign = 0 ; Let([$SH_errNum = 22 ; $SH_errText = &amp;quot;[error] No equal sign found in property list&amp;quot; ] ; &amp;quot;&amp;quot; ) ; checkoccurences  &amp;gt; 1 ; Let([$SH_errNum = 23 ; $SH_errText = &amp;quot;[error]Property name occures more then once in the Propertylist&amp;quot; ] ; &amp;quot;&amp;quot; ) ; // Level 3 countSeparator  = 0 and countEqualsign  &amp;lt;&amp;gt; 1 ; Let([$SH_errNum = 30 ; $SH_errText = &amp;quot;[error] invalid separator specified in property list&amp;quot; ] ; &amp;quot;&amp;quot; ) ; countSeparator   &amp;gt;=  countEqualsign ; Let([$SH_errNum = 31 ; $SH_errText = &amp;quot;[error] to many separators found in property list&amp;quot; ] ; &amp;quot;&amp;quot; ) ; // Warnings checkoccurences = 0 ; Let([$SH_errNum = 9 ; $SH_errText = &amp;quot;[warning] Variable not defined&amp;quot; ] ; &amp;quot;&amp;quot; ) ; IsEmpty(theValue) ; Let([$SH_errNum = 1 ; $SH_errText = &amp;quot;[warning] Variable is empty&amp;quot; ] ; &amp;quot;&amp;quot; ) ; // OK Let([$SH_errNum = 0 ; $SH_errText = &amp;quot;&amp;quot; ] ; theValue ) // OK ) )]]&amp;gt;&amp;lt;/Calculation&amp;gt;&amp;lt;/CustomFunction&amp;gt;</Clipboard><Picture></Picture></FMClipboard >